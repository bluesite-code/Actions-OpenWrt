name: Cursor-coding-test

on:
  workflow_dispatch:
    inputs:
      config:
        description: '选择配置文件'
        required: true
        default: '.config'
        type: choice
        options:
        - '.config'
        - 'test.config'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: v23.05.5
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo apt update
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply \
        python3-pyelftools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx unzip \
        vim wget xmlto xxd zlib1g-dev libfuse-dev
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆源代码
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 修改插件 Makefile
      run: |
        echo "当前工作目录: $(pwd)"
        echo "列出 openwrt/package 目录内容:"
        ls -l openwrt/package
        
        if [ -d "openwrt/package/alist" ]; then
          cd openwrt/package/alist
          if [ -f "Makefile" ]; then
            sed -i 's/PKG_BUILD_DEPENDS:=golang\/host/PKG_BUILD_DEPENDS:=golang\/host @(GO_1_23)/' Makefile
            echo "已修改 alist Makefile"
          else
            echo "警告: alist 目录中没有找到 Makefile"
          fi
          cd ../../..
        else
          echo "警告: alist 目录不存在"
        fi
        
        if [ -d "openwrt/package/mosdns" ]; then
          cd openwrt/package/mosdns
          if [ -f "Makefile" ]; then
            sed -i 's/PKG_BUILD_DEPENDS:=golang\/host/PKG_BUILD_DEPENDS:=golang\/host @(GO_1_23)/' Makefile
            echo "已修改 mosdns Makefile"
          else
            echo "警告: mosdns 目录中没有找到 Makefile"
          fi
          cd ../../..
        else
          echo "警告: mosdns 目录不存在"
        fi
        
        echo "修改完成，列出修改后的文件:"
        find openwrt/package -name Makefile -exec grep "PKG_BUILD_DEPENDS:=golang" {} +

    - name: 设置 OpenWrt Go 环境
      run: |
        cd openwrt
        echo "export PATH=/usr/local/go/bin:$PATH" >> package/base-files/files/etc/profile
        echo "export GOROOT=/usr/local/go" >> package/base-files/files/etc/profile
        echo "export GOPATH=$HOME/go" >> package/base-files/files/etc/profile
        echo "export GO111MODULE=on" >> package/base-files/files/etc/profile

    - name: 处理 Go 依赖
      run: |
        cd openwrt
        find . -name go.mod -execdir go mod tidy \;
        find . -name go.mod -execdir go get \;

    - name: 加载自定义资源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH 

    - name: 下载包
      run: |
        cd openwrt
        make defconfig
        make download -j8

    - name: 编译 OpenWrt
      id: compile
      run: |
        cd openwrt
        echo "系统 Go 版本："
        go version
        echo "OpenWrt 使用的 Go 版本："
        make toolchain/go/compile V=s
        mmake -j$(nproc) || make -j1 || make -j1 V=sake -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 检查编译状态
      if: steps.compile.outputs.status != 'success'
      run: |
        echo "编译失败，请检查日志"
        exit 1

    - name: 检查空间使用情况
      if: always()
      run: df -hT

    - name: 整理文件
      id: organize
      if: success()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 生成发布标签
      id: tag
      if: success()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "发布于 $(date +"%Y.%m.%d-%H:%M")" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到 Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 清理工作空间
      if: always()
      run: |
        sudo rm -rf /workspaces/openwrt

    - name: 清理旧的工作流
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0
        keep_minimum_runs: 3

    - name: 清理旧的 Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      if: success()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出错误日志
      if: failure()
      run: |
        cd openwrt
        cat logs/last-build.log
        # 输出其他可能有用的日志文件

    - name: 检查关键文件
      run: |
        cd openwrt
        echo "检查 .config 文件："
        cat .config
        echo "检查 feeds.conf.default 文件："
        cat feeds.conf.default
        # 检查其他可能影响编译的关键文件
