name: Cursor-coding-test

on:
  workflow_dispatch:
    inputs:
      config:
        description: '选择配置文件'
        required: true
        default: '.config'
        type: choice
        options:
        - '.config'
        - 'custom.config'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: v23.05.5
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo apt update
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        # 确认系统 Go 版本（仅用于信息目的）
        go version
        # 设置 Go 环境变量
        echo "GOPATH=$HOME/go" >> $GITHUB_ENV
        echo "PATH=$PATH:$HOME/go/bin" >> $GITHUB_ENV
        echo "GOTOOLCHAIN=local" >> $GITHUB_ENV

    - name: 缓存
      uses: actions/cache@v4
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-openwrt-${{ hashFiles('**/feeds.conf.default') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-

    - name: 克隆源码
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workspaces/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        # 克隆特定版本的 Go 语言包
        git clone https://github.com/sbwml/packages_lang_golang -b 23.x feeds/packages/lang/golang

    - name: 加载自定义资源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        # 更新所有 Go 相关包的 Makefile
        find package -name Makefile | xargs sed -i 's/GO_VERSION_REQUIRED:=.*/GO_VERSION_REQUIRED:=1.23/'
        # 在所有 Go 相关包的 Makefile 中添加 GOTOOLCHAIN 设置
        find package -name Makefile | xargs sed -i '/^include/i export GOTOOLCHAIN=local'

    - name: 下载dl库
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 开始编译
      id: compile
      timeout-minutes: 360
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查空间使用情况
      if: always()
      run: df -hT

    - name: 整理文件
      id: organize
      if: success()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 生成发布标签
      id: tag
      if: success()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "发布于 $(date +"%Y.%m.%d-%H:%M")" >> release.txt
        echo "::set-output name=status::success"

    - name: 上传固件到 Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 清理工作空间
      if: always()
      run: |
        sudo rm -rf /workspaces/openwrt

    - name: 清理旧的工作流
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0
        keep_minimum_runs: 3

    - name: 清理旧的 Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      if: success()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
