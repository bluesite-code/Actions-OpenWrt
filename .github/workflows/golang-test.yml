name: Golang-Test

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-plug-immortalwrt.sh
  DIY_P2_SH: diy-config.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      GOTOOLCHAIN: go1.23.6  # 全局锁定工具链版本

    steps:
    - name: Checkout
      uses: actions/checkout@v4
  
    # +++ 强化Go环境清理 +++
    - name: Nuclear cleanup Go
      run: |
        # 清除所有已知Go安装路径（包括用户级残留）
        sudo rm -rf \
          /usr/local/go* \
          /usr/bin/go \
          /usr/bin/gofmt \
          /usr/lib/go-* \
          /etc/apt/sources.list.d/golang* \
          /opt/hostedtoolcache/go \
          ~/go \
          ~/.cache/go-build \
          /tmp/go*
        
        # 清除apt安装的Go
        sudo apt-get purge -y golang-* golang golang-go &>/dev/null || true
        sudo apt-get autoremove -y

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo apt-get install -y \
          build-essential clang flex g++ gawk gcc-multilib gettext git \
          libncurses5-dev libssl-dev make python3 python3-distutils rsync \
          unzip zlib1g-dev file wget jq time libxml2-dev liblzma-dev libjson-c-dev
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a
      
    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Install Go 1.23.6 (Isolated)
      run: |
        export GO_VERSION=1.23.6
        export GO_ROOT=/opt/go/$GO_VERSION

        # 下载官方二进制包
        wget -q --tries=5 --retry-connrefused -O /tmp/go.tar.gz \
          "https://dl.google.com/go/go${GO_VERSION}.linux-amd64.tar.gz"

        # 创建隔离安装目录
        sudo mkdir -p $GO_ROOT
        sudo tar -xzf /tmp/go.tar.gz -C $GO_ROOT --strip-components=1

        # 设置系统级符号链接
        sudo ln -sf $GO_ROOT/bin/go /usr/local/bin/go
        sudo ln -sf $GO_ROOT/bin/gofmt /usr/local/bin/gofmt

        # 写入全局环境配置
        echo "export GOROOT=$GO_ROOT" | sudo tee /etc/profile.d/go.sh
        echo "export PATH=\$GOROOT/bin:\$PATH" | sudo tee -a /etc/profile.d/go.sh

    - name: Verify Go Environment
      run: |
        source /etc/profile.d/go.sh
        echo "=== Go Version ==="
        go version
        echo "\n=== Binary Path ==="
        readlink -f $(which go)
        echo "\n=== GOROOT ==="
        go env GOROOT
    
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        # 删除可能下载的旧版Go
        find dl -name "go-*.tar.gz" -delete 2>/dev/null || true
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    # +++ 关键修改：将Go安装移到下载步骤之后 +++
    - name: Manual install Go 1.23.6
      run: |
        wget -q --show-progress --progress=bar:force https://go.dev/dl/go1.23.6.linux-amd64.tar.gz
        sudo tar -C /usr/local -xzf go1.23.6.linux-amd64.tar.gz
        sudo ln -vsf /usr/local/go/bin/go /usr/bin/go
        sudo ln -vsf /usr/local/go/bin/gofmt /usr/bin/gofmt
        echo "GOROOT=/usr/local/go" | sudo tee -a /etc/environment
        echo "PATH=/usr/local/go/bin:$PATH" | sudo tee -a /etc/environment

    - name: Verify Go Installation
      run: |
        source /etc/environment
        echo "=== Go验证 ==="
        echo "Go路径: $(which go)"
        echo "Go版本: $(go version)"
        echo "GOROOT: $(go env GOROOT)"
        echo "工具链设置: $(go env GOTOOLCHAIN)"
        ls -l /usr/bin/go /usr/local/go/bin/go
        # 验证dl目录无旧版Go
        echo "dl目录Go残留: $(find openwrt/dl -name 'go-*.tar.gz' 2>/dev/null || echo '无')"

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        
        # 使用纯净环境编译（关键参数）
        env -i \
          PATH="/opt/go/1.23.6/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
          GOROOT=/opt/go/1.23.6 \
          GOTOOLCHAIN=go1.23.6 \
          make -j$(nproc) V=s \
            GO=/opt/go/1.23.6/bin/go \
            GOROOT=/opt/go/1.23.6 || \
        make -j1 V=s \
            GO=/opt/go/1.23.6/bin/go \
            GOROOT=/opt/go/1.23.6

        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "[GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
