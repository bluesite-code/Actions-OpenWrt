#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Update Checker

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: v23.05.5
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-plug-official.sh
  DIY_P2_SH: diy-config.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a
        ./scripts/feeds install liblzma
        ./scripts/feeds install libnetsnmp
        ./scripts/feeds install csstidy
        ./scripts/feeds install luasrcdiet
        ./scripts/feeds install libpam

    - name: Reinstall feeds
      run: cd openwrt && ./scripts/feeds update -i && ./scripts/feeds install -a

    - name: Configure additional packages
      run: |
        cd openwrt
        echo "CONFIG_PACKAGE_liblzma=y" >> .config
        echo "CONFIG_PACKAGE_libnetsnmp=y" >> .config
        echo "CONFIG_PACKAGE_libpam=y" >> .config
        make defconfig

    - name: Check for alist package
      run: |
        cd openwrt
        if [ -d "package/alist" ]; then
          echo "Alist package found in package directory"
          ls -l package/alist
        else
          echo "Alist package not found"
          echo "Searching for alist..."
          find . -name "*alist*"
        fi

    - name: Check Alist package structure
      run: |
        cd openwrt/package/alist
        echo "Alist package structure:"
        ls -R

    - name: Prepare Alist
      run: |
        cd openwrt/package/alist
        if [ -f "alist/Makefile" ]; then
          echo "Alist Makefile found in alist subdirectory, proceeding with OpenWrt build system"
        else
          echo "Alist Makefile not found in expected location"
          exit 1
        fi

    - name: Download package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin

    - name: Prepare artifact
      run: |
        mkdir -p ./artifact/firmware
        mkdir -p ./artifact/package
        mkdir -p ./artifact/buildinfo
        cp -rf $(find ./openwrt/bin/targets/ -type f) ./artifact/firmware/ || true
        cp -rf $(find ./openwrt/bin/packages/ -type f -name "*.ipk") ./artifact/package/ || true
        cp -rf $(find ./openwrt/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/ || true
        echo "File list:"
        find ./artifact -type f || echo "No files found in artifact directory"
        
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      if: github.event.inputs.release_type == 'artifact' || github.event.inputs.release_type == 'both'
      with:
        name: OpenWrt_firmware_and_packages
        path: ./artifact/

    - name: Generate release tag
      id: tag
      if: github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both'
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT
        echo "Release notes" > release.txt

    - name: Verify release info
      run: |
        echo "Release tag: ${{ steps.tag.outputs.release_tag }}"
        cat release.txt
        echo "Artifact contents:"
        find ./artifact -type f

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: (github.event.inputs.release_type == 'release' || github.event.inputs.release_type == 'both') && steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
          ./artifact/buildinfo/*
          ./artifact/firmware/*
          ./artifact/package/*
        fail_on_unmatched_files: false

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
