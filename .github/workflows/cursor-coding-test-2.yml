name: Cursor-coding-test-2

on:
  workflow_dispatch:
    inputs:
      config:
        description: '选择配置文件'
        required: true
        default: '.config'
        type: choice
        options:
        - '.config'
        - 'custom.config'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: v23.05.5
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-24.04
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo apt update
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply \
        python3-pyelftools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx unzip \
        vim wget xmlto xxd zlib1g-dev libfuse-dev

    - name: 克隆源码
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workspaces/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存
      uses: actions/cache@v3
      with:
        path: |
          openwrt/dl
          openwrt/build_dir/host
          openwrt/build_dir/toolchain-*
          openwrt/staging_dir
        key: ${{ runner.os }}-openwrt-${{ hashFiles('**/feeds.conf.default', '.config') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-openwrt-${{ hashFiles('**/feeds.conf.default', '.config') }}-
          ${{ runner.os }}-openwrt-

    - name: 加载自定义资源
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 检查并安装 Go
      run: |
        if ! command -v go &> /dev/null || [[ $(go version) != *"go1.23"* ]]; then
          echo "安装 Go 1.23.2..."
          wget https://go.dev/dl/go1.23.2.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go1.23.2.linux-amd64.tar.gz
          echo "GOROOT=/usr/local/go" >> $GITHUB_ENV
          echo "PATH=/usr/local/go/bin:$PATH" >> $GITHUB_ENV
        else
          echo "Go 1.23 已安装，版本为："
          go version
        fi

    - name: 设置 Go 环境变量
      run: |
        echo "GOTOOLCHAIN=go1.23.0" >> $GITHUB_ENV
        echo "GO111MODULE=on" >> $GITHUB_ENV

    - name: 验证 Go 环境
      run: |
        go version
        go env

    - name: 处理 Go 依赖
      run: |
        cd openwrt
        find . -name go.mod -execdir go mod tidy \;
        find . -name go.mod -execdir go get \;

    - name: 编译 OpenWrt
      run: |
        cd openwrt
        make defconfig
        make download -j8
        make V=s -j$(nproc)

    - name: 检查空间使用情况
      if: always()
      run: df -hT

    - name: 整理文件
      id: organize
      if: success()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 生成发布标签
      id: tag
      if: success()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "发布于 $(date +"%Y.%m.%d-%H:%M")" >> release.txt
        echo "::set-output name=status::success"

    - name: 上传固件到 Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 清理工作空间
      if: always()
      run: |
        sudo rm -rf /workspaces/openwrt

    - name: 清理旧的工作流
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0
        keep_minimum_runs: 3

    - name: 清理旧的 Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      if: success()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 输出错误日志
      if: failure()
      run: |
        cd openwrt
        cat logs/last-build.log
        # 输出其他可能有用的日志文件

    - name: 检查关键文件
      run: |
        cd openwrt
        echo "检查 .config 文件："
        cat .config
        echo "检查 feeds.conf.default 文件："
        cat feeds.conf.default

    - name: 清理旧的缓存
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const caches = await github.rest.actions.getActionsCacheList({
            owner: context.repo.owner,
            repo: context.repo.repo,
          })
          for (const cache of caches.data.actions_caches) {
            if (cache.key.startsWith('${{ runner.os }}-openwrt-') && cache.key !== '${{ runner.os }}-openwrt-${{ hashFiles('**/feeds.conf.default', '.config') }}-${{ github.sha }}') {
              console.log('Deleting cache:', cache.key)
              await github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: cache.id,
              })
            }
          }
