name: Cursor-coding-test-1

on:
  workflow_dispatch:
    inputs:
      config:
        description: '选择配置文件'
        required: true
        default: '.config'
        type: choice
        options:
        - '.config'
        - 'test.config'

env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: v23.05.5
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ${{ github.event.inputs.config }}
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo apt update
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply \
        python3-pyelftools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx unzip \
        vim wget xmlto xxd zlib1g-dev libfuse-dev
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆源代码
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt

    - name: 加载自定义 feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      working-directory: openwrt
      run: |
        git pull
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 安装OpenWrt SDK
      uses: sbwml/openwrt-gh-action-sdk@go1.23

    - name: 加载自定义配置
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 下载包
      working-directory: openwrt
      run: |
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译 OpenWrt
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_OUTPUT
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_OUTPUT

    - name: 检查编译状态
      if: steps.compile.outputs.status != 'success'
      run: |
        echo "编译失败，请检查日志"
        exit 1

    - name: 检查空间使用情况
      if: (!cancelled())
      run: df -hT

    - name: 整理文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 生成固件名称
      id: generate_name
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        device_info=$(cat openwrt/.config | grep "CONFIG_TARGET_BOARD" | cut -d '"' -f 2)
        device_info+="_"
        device_info+=$(cat openwrt/.config | grep "CONFIG_TARGET_SUBTARGET" | cut -d '"' -f 2)
        time=$(date +'%Y%m%d_%H%M')
        firmware_prefix="${device_info}_${time}"
        for file in *; do
          new_name="${firmware_prefix}_${file}"
          mv "$file" "$new_name"
        done
        echo "FIRMWARE_PREFIX=$firmware_prefix" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@v3
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ steps.generate_name.outputs.FIRMWARE_PREFIX }}
        path: ${{ steps.organize.outputs.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ steps.generate_name.outputs.FIRMWARE_PREFIX }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "发布标签: ${{ steps.generate_name.outputs.FIRMWARE_PREFIX }}" >> release.txt
        echo "固件包含设备: ${{ steps.compile.outputs.DEVICE_NAME }}" >> release.txt
        echo "编译时间: ${{ steps.compile.outputs.FILE_DATE }}" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件到发布
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ steps.organize.outputs.FIRMWARE }}/*

    - name: 清理工作空间
      if: always()
      run: |
        sudo rm -rf /workspaces/openwrt

    - name: 清理旧的工作流
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 0
        keep_minimum_runs: 3

    - name: 清理旧的 Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      if: success()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
