name: Openwrt-immortalwrt-HC5962

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: v23.05.4
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-plug-immortalwrt.sh
  DIY_P2_SH: diy-config.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom configuration
      run: |
        # 文件移动部分（条件判断）
        if [ -f feeds.conf.default ]; then
          mv feeds.conf.default /workdir/openwrt/feeds.conf.default
          echo "Moved feeds.conf.default"
        else
          echo "feeds.conf.default not found, skipping"
        fi

        if [ -d files ]; then
          mv files /workdir/openwrt/files
          echo "Moved files directory"
        else
          echo "files directory not found, skipping"
        fi

        if [ -f .config ]; then
          mv .config /workdir/openwrt/.config
          echo "Moved .config"
        else
          echo ".config not found, skipping"
        fi

        cd /workdir/openwrt

        # Golang feed 替换（强制校验）
        if [ -f $GITHUB_WORKSPACE/$DIY_P1_SH ]; then
          chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH
          $GITHUB_WORKSPACE/$DIY_P1_SH
        else
          echo "DIY_P1_SH script not found!"
          exit 1
        fi

        ./scripts/feeds update -a
        ./scripts/feeds install -a

        # 配置写入（强制校验）
        if [ -f $GITHUB_WORKSPACE/$DIY_P2_SH ]; then
          chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
          $GITHUB_WORKSPACE/$DIY_P2_SH
        else
          echo "DIY_P2_SH script not found!"
          exit 1
        fi

    - name: Clean cache
      run: cd /workdir/openwrt && make clean

    - name: Dump golang-version.mk
      run: |
        cd /workdir/openwrt/feeds/packages/lang/golang || {
          echo "❌ Error entering golang feed directory";
          exit 1
        }

        if [ ! -f golang-version.mk ]; then
          echo "::warning::golang-version.mk missing, checking alternatives..."
          ALT_PATH=$(find ../ -name "golang-version.mk" -print -quit)
          
          if [ -n "$ALT_PATH" ]; then
            echo "ℹ️ Found alternative path: $ALT_PATH"
            echo "=== FILE CONTENT BEGIN ==="
            cat $ALT_PATH
            echo "=== FILE CONTENT END ==="
          else
            echo "::error::golang-version.mk not found in any known locations"
            exit 1
          fi
        else
          echo "=== FILE CONTENT BEGIN ==="
          cat golang-version.mk
          echo "=== FILE CONTENT END ==="
        fi

    - name: Verify Golang Feed
      run: |
        echo "=== 实时路径验证 ==="
        pwd
        ls -l feeds/packages/lang/golang
        
        echo "=== golang-version.mk 存在性检查 ==="
        if [ -f feeds/packages/lang/golang/golang-version.mk ]; then
          echo "✅ 验证通过"
          cat feeds/packages/lang/golang/golang-version.mk
        else
          echo "::error::关键文件缺失，请检查 feed 替换流程"
          exit 1
        fi

    - name: Check Golang config
      run: |
        cd /workdir/openwrt
        echo "=== GOLANG CONFIG ==="
        grep "CONFIG_GOLANG" .config
        echo "====================="

    - name: Download package
      id: package
      run: |
        cd /workdir/openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build Golang toolchain
      run: |
        cd /workdir/openwrt
        make toolchain/golang/clean
        make toolchain/golang/compile V=s

    - name: Verify Golang toolchain
      run: |
        cd /workdir/openwrt
        echo "=== GO VERSION ==="
        find staging_dir/ -name "go" -exec {} version \;
        echo "=================="

    - name: Compile the firmware
      id: compile
      run: |
        cd /workdir/openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: /workdir/openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd /workdir/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
