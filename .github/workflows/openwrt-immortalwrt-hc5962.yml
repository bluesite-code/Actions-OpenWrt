name: Openwrt-immortalwrt-HC5962

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: v23.05.4
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-plug-immortalwrt.sh
  DIY_P2_SH: diy-config.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo apt-get install -y \
          build-essential clang flex g++ gawk gcc-multilib gettext git \
          libncurses5-dev libssl-dev make python3 python3-distutils rsync \
          unzip zlib1g-dev file wget jq time libxml2-dev liblzma-dev libjson-c-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Pre-download binutils (GNU Mirror)
      run: |
        cd /workdir/openwrt
         # 步骤1：清洁环境
        make distclean
        rm -rf dl/binutils-2.42* tmp/
    
        # 使用 GNU 官方镜像网络（自动选择最快节点）
        wget --tries=5 --retry-connrefused --waitretry=30 --no-check-certificate \
          "https://ftpmirror.gnu.org/binutils/binutils-2.42.tar.xz"
    
        # 动态更新哈希值
        NEW_HASH=$(sha256sum dl/binutils-2.42.tar.xz | cut -d' ' -f1)
        sed -i "s/HASH:=.*/HASH:=$NEW_HASH/" package/devel/binutils/Makefile

        #验证配置
        echo "当前配置哈希值："
        grep 'HASH:=' package/devel/binutils/Makefile

        # 确保文件存在
        cp -v binutils-2.42.tar.xz /workdir/openwrt/dl/

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom configuration
      run: |
        echo "=== 初始目录结构 ==="
        ls -l
        echo "=== 工作区路径 ==="
        echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
        echo "当前目录: $(pwd)"

        sudo mkdir -p /workdir/openwrt
        sudo chown -R $USER:$GROUPS /workdir/openwrt

        [ -f feeds.conf.default ] && rsync -av --ignore-existing feeds.conf.default /workdir/openwrt/
        [ -d files ] && rsync -av --progress files/ /workdir/openwrt/files/
        [ -f .config ] && rsync -av --progress .config /workdir/openwrt/

        cd /workdir/openwrt
        echo "=== 目标目录结构 ==="
        tree -L 2 || ls -al

        [ -f feeds.conf.default ] || touch feeds.conf.default

        if [ -f $GITHUB_WORKSPACE/$DIY_P1_SH ]; then
          echo "=== 执行增强版 diy-plug-immortalwrt.sh ==="
          chmod +x $GITHUB_WORKSPACE/$DIY_P1_SH
          export GITHUB_WORKSPACE
          $GITHUB_WORKSPACE/$DIY_P1_SH 2>&1 | tee diy-plug.log
        else
          echo "::error::DIY 脚本 $DIY_P1_SH 未找到!"
          exit 1
        fi

    - name: Download package
      id: package
      run: |
        cd /workdir/openwrt
        # 仅下载不重置配置
        make download -j8
        find dl -size -1024c -exec ls -l {} \; -delete

    - name: Rebuild toolchain
      run: |
        cd /workdir/openwrt
        make toolchain/clean
        make toolchain/compile

    - name: Compile the firmware
      id: compile
      run: |
        cd /workdir/openwrt
        echo -e "使用 $(nproc) 线程编译"
        make -j$(nproc) || {
          echo "::warning::并行编译失败，尝试单线程编译..."
          make -j1 || {
            echo "::error::编译彻底失败，启用详细日志模式..."
            make -j1 V=s
            exit 1
          }
        }
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd /workdir/openwrt/bin/targets
        TARGET_DIR=$(find . -mindepth 2 -maxdepth 2 -type d -not -path '*/packages/*' | head -1)
        [ -z "$TARGET_DIR" ] && { echo "::error::未找到固件目录！"; exit 1; }
        
        cd "$TARGET_DIR"
        rm -rf packages
        for f in *sysupgrade.bin; do
          new_name="mi-router-3g-$(date +%Y%m%d)-${f#*-}"
          mv -v "$f" "$new_name"
        done
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        retention-days: 3

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
